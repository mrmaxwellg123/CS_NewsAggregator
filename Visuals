import streamlit as st
import requests
from textblob import TextBlob

st.set_page_config(page_title="katchupOTN", layout="centered")

# Custom CSS for Pinterest-like style

st.markdown("""
<style>
/* ‚úÖ Force full-page dark indigo background */
.stApp {
    background-color: #2C2C54 !important;
}

/* üåü Title + headings = light gray */
h1, h2, h3 {
    color: #ECECEC !important;
}

/* ‚úÖ Button styling */
.stButton > button {
    background-color: #AAABB8 !important;
    color: #474787 !important;
    font-weight: bold;
    border-radius: 10px;
    padding: 0.6em 2em;
    border: none;
}

/* Dropdown font style */
div[data-baseweb="select"] {
    font-family: 'Georgia', serif;
    font-size: 1.05em;
}

/* ‚úÖ News card background: cool gray */
.news-card {
    background-color: #AAABB8;
    border-radius: 20px;
    padding: 1.5em;
    margin-top: 1.2em;
    box-shadow: 0 6px 16px rgba(0,0,0,0.05);
}

/* ‚úÖ Summary: deep purple gray */
.news-card p {
    color: #474787;
}

/* ‚úÖ Sentiment box: white with deep text */
.sentiment-box {
    border: 1px solid #474787;
    background-color: #ECECEC;
    color: #2C2C54;
    padding: 0.4em 0.8em;
    border-radius: 10px;
    display: inline-block;
    font-weight: 500;
    margin-top: 1em;
}

/* ‚úÖ Use soft serif font everywhere */
html, body, [class*="css"] {
    font-family: 'Georgia', serif;
}
</style>
""", unsafe_allow_html=True)

# Function to convert sentiment to stars
def get_star_rating(score):
    normalized = (score + 1) / 2 * 5  # Convert -1..1 to 0..5 scale
    stars = int(round(normalized))
    return "‚òÖ" * stars + "‚òÜ" * (5 - stars)

# Title
st.markdown("<h1 style='text-align: center;'>Simple News Aggregator</h1>", unsafe_allow_html=True)
st.markdown("<h3 style='text-align: center; margin-top: -1em;'>Choose a topic:</h3>", unsafe_allow_html=True)

# Fetch news from API
def fetch_news(api_key="5a3db5e60eca4943ab7c723d64f69754", topic="business"):
    url = f"https://newsapi.org/v2/everything?q={topic}&apiKey={api_key}"
    response = requests.get(url)
    news_data = response.json()
    return news_data["articles"]

# Dropdown and button
topic = st.selectbox("", ["business", "technology", "sports"])
if st.button("Load News"):
    st.write(f"‚ÜóÔ∏è Fetching {topic} news...")
    articles = fetch_news(topic=topic)

    for article in articles[:5]:  # Top 5
        description = article.get("description", "")
        sentiment = TextBlob(description).sentiment.polarity if description else 0

        card_html = f'''
        <div class="news-card">
            <h3>{article["title"]}</h3>
            <p style='color: #474787;'>{description}</p>
            <div class="sentiment-box">Sentiment: {get_star_rating(sentiment)}</div>
            <p style="font-size: 0.85em; color: gray; margin-top: 1em;">
                Source: {article["source"]["name"]} | Published: {article["publishedAt"]}
            </p>
        </div>
        '''
        st.markdown(card_html, unsafe_allow_html=True)
